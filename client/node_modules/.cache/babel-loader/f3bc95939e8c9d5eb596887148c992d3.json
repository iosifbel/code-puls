{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joseph\\\\Desktop\\\\BcThesis\\\\licenta_aplicatie\\\\code-puls\\\\client\\\\src\\\\pages\\\\tests.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Route, Switch, withRouter, Redirect, useRouteMatch, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { TakeTest, EvaluateTest } from \".\";\nimport { TestsGrid, TestsTable, Loader } from \"../components/\";\nimport { AppContext, AuthContext, utils } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst rootURL = utils.rootURL;\n\nfunction Tests() {\n  _s();\n\n  const user = useContext(AuthContext).authState.userInfo;\n  const [tests, setTests] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [redirect, setRedirect] = useState(false);\n  const {\n    testState,\n    setTestInProgress\n  } = useContext(AppContext); // const { setShowNavbar } = useContext(AppContext);\n  // setShowNavbar(false);\n\n  const handleCallback = childData => {\n    const clickedTestId = parseInt(childData);\n\n    if (testState.id < 0 || testState.id === clickedTestId) {\n      const clickedTest = tests.find(item => item.id === clickedTestId);\n      setTestInProgress(clickedTest);\n      setRedirect(true);\n    } else {\n      console.log(\"test already in progress..\");\n    }\n  };\n\n  useEffect(() => {\n    getTests(user, setIsLoading, setTests);\n  }, []);\n  useEffect(() => {\n    console.log(tests);\n  }, [tests]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [redirect && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: `/tests/takeTest`,\n        children: /*#__PURE__*/_jsxDEV(TakeTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `/tests/evaluateTest`,\n        children: /*#__PURE__*/_jsxDEV(EvaluateTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/tests\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(TestsTable, {\n          title: \"Teste Programate\",\n          data: tests,\n          callback: handleCallback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tests, \"mzRasvqcDosif7om09M+/Dh7Pxw=\");\n\n_c = Tests;\n\nconst getTests = async (user, setIsLoading, setTests) => {\n  console.log(\"getting tests from db..\");\n  let url = `${rootURL}`;\n\n  if (user.tip === \"student\") {\n    url += `/students/${user.id}/due`;\n  } else {\n    url += `/teachers/${user.id}/ungradedSubmissions`;\n  }\n\n  setIsLoading(true);\n  const response = await axios.get(url).catch(err => console.log(err));\n\n  if (response) {\n    const tests = response.data;\n    const processedTests = processTests(tests);\n    console.log(\"processed tests: \");\n    console.log(processedTests);\n    setTests(tests);\n  }\n\n  setIsLoading(false);\n};\n\nconst processTests = tests => {\n  const newTests = [];\n  tests.forEach(item => {\n    if (item.deadline !== null) {\n      item.deadline = parseDateTime(item.deadline);\n    }\n\n    newTests.push(item);\n  });\n  return newTests;\n};\n\nconst parseDateTime = datetime => {\n  try {\n    const date = new Date(datetime); // console.log(date.getTime());\n\n    return date.toLocaleDateString(\"ro-RO\") + \", ora \" + date.getHours() + \":\" + date.getMinutes();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getLanguage = (languageId, languages) => {\n  const language = languages.find(item => item.id === languageId);\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\n  return language.name.replace(regexToRemoveParanthesis, \"\");\n};\n\nexport default Tests;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"sources":["C:/Users/Joseph/Desktop/BcThesis/licenta_aplicatie/code-puls/client/src/pages/tests.js"],"names":["useContext","useEffect","useState","Route","Switch","withRouter","Redirect","useRouteMatch","useLocation","axios","TakeTest","EvaluateTest","TestsGrid","TestsTable","Loader","AppContext","AuthContext","utils","rootURL","Tests","user","authState","userInfo","tests","setTests","isLoading","setIsLoading","redirect","setRedirect","testState","setTestInProgress","handleCallback","childData","clickedTestId","parseInt","id","clickedTest","find","item","console","log","getTests","tip","props","url","response","get","catch","err","data","processedTests","processTests","newTests","forEach","deadline","parseDateTime","push","datetime","date","Date","toLocaleDateString","getHours","getMinutes","error","getLanguage","languageId","languages","language","regexToRemoveParanthesis","name","replace"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  withRouter,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { TakeTest, EvaluateTest } from \".\";\r\nimport { TestsGrid, TestsTable, Loader } from \"../components/\";\r\nimport { AppContext, AuthContext, utils } from \"../context\";\r\n\r\nconst rootURL = utils.rootURL;\r\n\r\nfunction Tests() {\r\n  const user = useContext(AuthContext).authState.userInfo;\r\n\r\n  const [tests, setTests] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [redirect, setRedirect] = useState(false);\r\n\r\n  const { testState, setTestInProgress } = useContext(AppContext);\r\n\r\n  // const { setShowNavbar } = useContext(AppContext);\r\n  // setShowNavbar(false);\r\n\r\n  const handleCallback = (childData) => {\r\n    const clickedTestId = parseInt(childData);\r\n    if (testState.id < 0 || testState.id === clickedTestId) {\r\n      const clickedTest = tests.find((item) => item.id === clickedTestId);\r\n      setTestInProgress(clickedTest);\r\n      setRedirect(true);\r\n    } else {\r\n      console.log(\"test already in progress..\");\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTests(user, setIsLoading, setTests);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(tests);\r\n  }, [tests]);\r\n\r\n  return (\r\n    <>\r\n      {redirect && (\r\n        <Redirect\r\n          to={user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\"}\r\n        />\r\n      )}\r\n      {isLoading ? (\r\n        <Loader></Loader>\r\n      ) : (\r\n        <Switch>\r\n          <Route path={`/tests/takeTest`}>\r\n            <TakeTest></TakeTest>\r\n          </Route>\r\n          <Route path={`/tests/evaluateTest`}>\r\n            <EvaluateTest></EvaluateTest>\r\n          </Route>\r\n\r\n          <Route\r\n            path=\"/tests\"\r\n            exact={true}\r\n            render={(props) => (\r\n              <TestsTable\r\n                title=\"Teste Programate\"\r\n                data={tests}\r\n                callback={handleCallback}\r\n              ></TestsTable>\r\n            )}\r\n          />\r\n        </Switch>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst getTests = async (user, setIsLoading, setTests) => {\r\n  console.log(\"getting tests from db..\");\r\n  let url = `${rootURL}`;\r\n  if (user.tip === \"student\") {\r\n    url += `/students/${user.id}/due`;\r\n  } else {\r\n    url += `/teachers/${user.id}/ungradedSubmissions`;\r\n  }\r\n\r\n  setIsLoading(true);\r\n  const response = await axios.get(url).catch((err) => console.log(err));\r\n\r\n  if (response) {\r\n    const tests = response.data;\r\n    const processedTests = processTests(tests);\r\n    console.log(\"processed tests: \");\r\n    console.log(processedTests);\r\n    setTests(tests);\r\n  }\r\n  setIsLoading(false);\r\n};\r\n\r\nconst processTests = (tests) => {\r\n  const newTests = [];\r\n  tests.forEach((item) => {\r\n    if (item.deadline !== null) {\r\n      item.deadline = parseDateTime(item.deadline);\r\n    }\r\n    newTests.push(item);\r\n  });\r\n  return newTests;\r\n};\r\n\r\nconst parseDateTime = (datetime) => {\r\n  try {\r\n    const date = new Date(datetime);\r\n    // console.log(date.getTime());\r\n    return (\r\n      date.toLocaleDateString(\"ro-RO\") +\r\n      \", ora \" +\r\n      date.getHours() +\r\n      \":\" +\r\n      date.getMinutes()\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst getLanguage = (languageId, languages) => {\r\n  const language = languages.find((item) => item.id === languageId);\r\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\r\n\r\n  return language.name.replace(regexToRemoveParanthesis, \"\");\r\n};\r\n\r\nexport default Tests;\r\n"]},"metadata":{},"sourceType":"module"}