{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joseph\\\\Desktop\\\\BcThesis\\\\licenta_aplicatie\\\\code-puls\\\\client\\\\src\\\\pages\\\\tests.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router\";\nimport { Route, Switch, withRouter, Redirect, useRouteMatch, useLocation } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { TakeTest, EvaluateTest } from \".\";\nimport { TestsGrid, TestsTable, Loader } from \"../components/\";\nimport { AppContext, AuthContext, utils } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst rootURL = utils.rootURL;\n\nfunction Tests() {\n  _s();\n\n  const user = useContext(AuthContext).authState.userInfo;\n  const {\n    judge0Languges\n  } = useContext(AppContext);\n  const history = useHistory();\n  const [tests, setTests] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [redirect, setRedirect] = useState(false);\n  const [redirectPath, setRedirectPath] = useState(() => {\n    return user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\";\n  });\n  const {\n    testState,\n    setTestInProgress\n  } = useContext(AppContext);\n\n  const handleCallback = childData => {\n    const clickedTestId = parseInt(childData);\n\n    if (user.tip === \"student\") {\n      if (testState.id < 0 || testState.id === clickedTestId) {\n        const clickedTest = tests.find(item => item.id === clickedTestId);\n        setTestInProgress(clickedTest);\n        setRedirect(true);\n      } else {\n        console.log(\"test already in progress..\");\n      }\n    } else {\n      setRedirect(true);\n    }\n  };\n\n  useEffect(() => {\n    getTests(user, setIsLoading, setTests, judge0Languges);\n  }, []);\n  useEffect(() => {\n    console.log(tests);\n  }, [tests]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [redirect && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: redirectPath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 20\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: `/tests/takeTest`,\n        children: /*#__PURE__*/_jsxDEV(TakeTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: `/tests/evaluateTest`,\n        children: /*#__PURE__*/_jsxDEV(EvaluateTest, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/tests\",\n        exact: true,\n        render: props => /*#__PURE__*/_jsxDEV(TestsTable, {\n          title: \"Teste Programate\",\n          data: tests,\n          callback: handleCallback,\n          redirectPath: redirectPath\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Tests, \"DtWwfp8D2gExcMcHWqybFXrS9Pw=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tests;\n\nconst getTests = async (user, setIsLoading, setTests, languages) => {\n  console.log(\"getting tests from db..\");\n  let url = `${rootURL}`;\n\n  if (user.tip === \"student\") {\n    url += `/students/${user.id}/due`;\n  } else {\n    url += `/teachers/${user.id}/ungradedSubmissions`;\n  }\n\n  setIsLoading(true);\n  const response = await axios.get(url).catch(err => console.log(err));\n\n  if (response) {\n    const tests = response.data;\n    processTests(tests, languages);\n    setTests(tests);\n  }\n\n  setIsLoading(false);\n};\n\nconst processTests = (tests, languages) => {\n  tests.forEach(item => {\n    if (item.deadline !== null) {\n      item.deadline = parseDateTime(item.deadline);\n    }\n\n    if (item.id_limbaj_programare !== null) {\n      item.limbaj = getLanguage(item.id_limbaj_programare, languages);\n    }\n  });\n};\n\nconst parseDateTime = datetime => {\n  try {\n    const date = new Date(datetime); // console.log(date.getTime());\n\n    return date.toLocaleDateString(\"ro-RO\") + \", ora \" + date.getHours() + \":\" + date.getMinutes();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getLanguage = (languageId, languages) => {\n  const language = languages.find(item => item.id === languageId);\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\n  return language.name.replace(regexToRemoveParanthesis, \"\");\n};\n\nexport default Tests;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tests\");","map":{"version":3,"sources":["C:/Users/Joseph/Desktop/BcThesis/licenta_aplicatie/code-puls/client/src/pages/tests.js"],"names":["useContext","useEffect","useState","useHistory","Route","Switch","withRouter","Redirect","useRouteMatch","useLocation","axios","TakeTest","EvaluateTest","TestsGrid","TestsTable","Loader","AppContext","AuthContext","utils","rootURL","Tests","user","authState","userInfo","judge0Languges","history","tests","setTests","isLoading","setIsLoading","redirect","setRedirect","redirectPath","setRedirectPath","tip","testState","setTestInProgress","handleCallback","childData","clickedTestId","parseInt","id","clickedTest","find","item","console","log","getTests","props","languages","url","response","get","catch","err","data","processTests","forEach","deadline","parseDateTime","id_limbaj_programare","limbaj","getLanguage","datetime","date","Date","toLocaleDateString","getHours","getMinutes","error","languageId","language","regexToRemoveParanthesis","name","replace"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport {\r\n  Route,\r\n  Switch,\r\n  withRouter,\r\n  Redirect,\r\n  useRouteMatch,\r\n  useLocation,\r\n} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { TakeTest, EvaluateTest } from \".\";\r\nimport { TestsGrid, TestsTable, Loader } from \"../components/\";\r\nimport { AppContext, AuthContext, utils } from \"../context\";\r\n\r\nconst rootURL = utils.rootURL;\r\n\r\nfunction Tests() {\r\n  const user = useContext(AuthContext).authState.userInfo;\r\n  const { judge0Languges } = useContext(AppContext);\r\n  const history = useHistory();\r\n  const [tests, setTests] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [redirectPath, setRedirectPath] = useState(() => {\r\n    return user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\";\r\n  });\r\n  const { testState, setTestInProgress } = useContext(AppContext);\r\n\r\n  const handleCallback = (childData) => {\r\n    const clickedTestId = parseInt(childData);\r\n    if (user.tip === \"student\") {\r\n      if (testState.id < 0 || testState.id === clickedTestId) {\r\n        const clickedTest = tests.find((item) => item.id === clickedTestId);\r\n        setTestInProgress(clickedTest);\r\n        setRedirect(true);\r\n      } else {\r\n        console.log(\"test already in progress..\");\r\n      }\r\n    } else {\r\n      setRedirect(true);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    getTests(user, setIsLoading, setTests, judge0Languges);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(tests);\r\n  }, [tests]);\r\n\r\n  return (\r\n    <>\r\n      {redirect && <Redirect to={redirectPath} />}\r\n      {isLoading ? (\r\n        <Loader></Loader>\r\n      ) : (\r\n        <Switch>\r\n          <Route path={`/tests/takeTest`}>\r\n            <TakeTest></TakeTest>\r\n          </Route>\r\n          <Route path={`/tests/evaluateTest`}>\r\n            <EvaluateTest></EvaluateTest>\r\n          </Route>\r\n\r\n          <Route\r\n            path=\"/tests\"\r\n            exact={true}\r\n            render={(props) => (\r\n              <TestsTable\r\n                title=\"Teste Programate\"\r\n                data={tests}\r\n                callback={handleCallback}\r\n                redirectPath={redirectPath}\r\n              ></TestsTable>\r\n            )}\r\n          />\r\n        </Switch>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst getTests = async (user, setIsLoading, setTests, languages) => {\r\n  console.log(\"getting tests from db..\");\r\n  let url = `${rootURL}`;\r\n  if (user.tip === \"student\") {\r\n    url += `/students/${user.id}/due`;\r\n  } else {\r\n    url += `/teachers/${user.id}/ungradedSubmissions`;\r\n  }\r\n\r\n  setIsLoading(true);\r\n  const response = await axios.get(url).catch((err) => console.log(err));\r\n\r\n  if (response) {\r\n    const tests = response.data;\r\n    processTests(tests, languages);\r\n    setTests(tests);\r\n  }\r\n  setIsLoading(false);\r\n};\r\n\r\nconst processTests = (tests, languages) => {\r\n  tests.forEach((item) => {\r\n    if (item.deadline !== null) {\r\n      item.deadline = parseDateTime(item.deadline);\r\n    }\r\n    if (item.id_limbaj_programare !== null) {\r\n      item.limbaj = getLanguage(item.id_limbaj_programare, languages);\r\n    }\r\n  });\r\n};\r\n\r\nconst parseDateTime = (datetime) => {\r\n  try {\r\n    const date = new Date(datetime);\r\n    // console.log(date.getTime());\r\n    return (\r\n      date.toLocaleDateString(\"ro-RO\") +\r\n      \", ora \" +\r\n      date.getHours() +\r\n      \":\" +\r\n      date.getMinutes()\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst getLanguage = (languageId, languages) => {\r\n  const language = languages.find((item) => item.id === languageId);\r\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\r\n\r\n  return language.name.replace(regexToRemoveParanthesis, \"\");\r\n};\r\n\r\nexport default Tests;\r\n"]},"metadata":{},"sourceType":"module"}