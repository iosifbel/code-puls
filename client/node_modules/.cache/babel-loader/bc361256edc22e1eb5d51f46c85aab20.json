{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joseph\\\\Desktop\\\\BcThesis\\\\licenta_aplicatie\\\\code-puls\\\\client\\\\src\\\\pages\\\\tests.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from \"react\";\nimport { Route, Switch, withRouter, Redirect, useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { TakeTest, EvaluateTest } from \".\";\nimport { TestsTable, Loader, AlertBar } from \"../components/\";\nimport { AppContext, AuthContext, utils } from \"../context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst rootURL = utils.rootURL;\n\nfunction Tests() {\n  _s();\n\n  const user = useContext(AuthContext).authState.userInfo;\n  const {\n    judge0Languges,\n    setShowNavbar\n  } = useContext(AppContext);\n  setShowNavbar(true);\n  const history = useHistory();\n  const [tests, setTests] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [redirect, setRedirect] = useState(false);\n  const [redirectPath] = useState(() => {\n    return user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\";\n  });\n  const {\n    testState,\n    setTestInProgress\n  } = useContext(AppContext);\n  const [alert, setAlert] = useState({\n    open: false,\n    severity: \"success\",\n    message: \"\"\n  });\n\n  const handleCallback = childData => {\n    const clickedTestId = parseInt(childData);\n    console.log(testState);\n\n    if (testState || testState.id === clickedTestId) {\n      const clickedTest = tests.find(item => item.id === clickedTestId);\n      setTestInProgress(clickedTest);\n      setRedirect(true);\n      history.push(redirectPath);\n    }\n  };\n\n  useEffect(() => {\n    getTests(user, setIsLoading, setTests, judge0Languges);\n    console.log(tests);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [redirect && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: redirectPath\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 20\n    }, this), isLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // <Switch>\n    //   <Route path={`/tests/takeTest`}>\n    //     <TakeTest></TakeTest>\n    //   </Route>\n    //   <Route path={`/tests/evaluateTest`}>\n    //     <EvaluateTest></EvaluateTest>\n    //   </Route>\n    //   <Route\n    //     path=\"/tests\"\n    //     exact={true}\n    //     render={(props) => (\n    //       <TestsTable\n    //         title=\"Teste Programate\"\n    //         data={tests}\n    //         callback={handleCallback}\n    //         redirectPath={redirectPath}\n    //       ></TestsTable>\n    //     )}\n    //   />\n    // </Switch>\n    _jsxDEV(_Fragment, {\n      children: [!redirect && /*#__PURE__*/_jsxDEV(AlertBar, {\n        open: alert.open,\n        severity: alert.severity,\n        message: alert.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TestsTable, {\n        title: user.tip === \"student\" ? \"Teste programate\" : \"Teste de corectat\",\n        data: tests,\n        callback: handleCallback,\n        redirectPath: redirectPath\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true);\n}\n\n_s(Tests, \"XLOyJPIoOmZAzOqQCLxPJxVbdjw=\", false, function () {\n  return [useHistory];\n});\n\n_c = Tests;\n\nconst getTests = async (user, setIsLoading, setTests, languages) => {\n  console.log(\"getting tests from db..\");\n  let url = `${rootURL}`;\n\n  if (user.tip === \"student\") {\n    url += `/students/${user.id}/due`;\n  } else {\n    url += `/teachers/${user.id}/ungradedSubmissions`;\n  }\n\n  setIsLoading(true);\n  const response = await axios.get(url).catch(err => console.log(err));\n\n  if (response) {\n    const tests = response.data;\n    processTests(tests, languages);\n    setTests(tests);\n  }\n\n  setIsLoading(false);\n};\n\nconst processTests = (tests, languages) => {\n  tests.forEach(item => {\n    if (item.deadline !== null) {\n      item.deadline = parseDateTime(item.deadline);\n    }\n\n    if (item.id_limbaj_programare !== null) {\n      item.limbaj = getLanguage(item.id_limbaj_programare, languages);\n    }\n  });\n};\n\nconst parseDateTime = datetime => {\n  try {\n    const date = new Date(datetime); // console.log(date.getTime());\n\n    return date.toLocaleDateString(\"ro-RO\") + \", ora \" + date.getHours() + \":\" + date.getMinutes();\n  } catch (error) {\n    console.log(error);\n  }\n};\n\nconst getLanguage = (languageId, languages) => {\n  const language = languages.find(item => item.id === languageId);\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\n  return language.name.replace(regexToRemoveParanthesis, \"\");\n};\n\nexport default _c2 = withRouter(Tests);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Tests\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["C:/Users/Joseph/Desktop/BcThesis/licenta_aplicatie/code-puls/client/src/pages/tests.js"],"names":["useContext","useEffect","useState","Route","Switch","withRouter","Redirect","useHistory","axios","TakeTest","EvaluateTest","TestsTable","Loader","AlertBar","AppContext","AuthContext","utils","rootURL","Tests","user","authState","userInfo","judge0Languges","setShowNavbar","history","tests","setTests","isLoading","setIsLoading","redirect","setRedirect","redirectPath","tip","testState","setTestInProgress","alert","setAlert","open","severity","message","handleCallback","childData","clickedTestId","parseInt","console","log","id","clickedTest","find","item","push","getTests","languages","url","response","get","catch","err","data","processTests","forEach","deadline","parseDateTime","id_limbaj_programare","limbaj","getLanguage","datetime","date","Date","toLocaleDateString","getHours","getMinutes","error","languageId","language","regexToRemoveParanthesis","name","replace"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\n\r\nimport {\r\n  Route,\r\n  Switch,\r\n  withRouter,\r\n  Redirect,\r\n  useHistory,\r\n} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport { TakeTest, EvaluateTest } from \".\";\r\nimport { TestsTable, Loader, AlertBar } from \"../components/\";\r\nimport { AppContext, AuthContext, utils } from \"../context\";\r\n\r\nconst rootURL = utils.rootURL;\r\n\r\nfunction Tests() {\r\n  const user = useContext(AuthContext).authState.userInfo;\r\n  const { judge0Languges, setShowNavbar } = useContext(AppContext);\r\n  setShowNavbar(true);\r\n\r\n  const history = useHistory();\r\n  const [tests, setTests] = useState();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [redirect, setRedirect] = useState(false);\r\n  const [redirectPath] = useState(() => {\r\n    return user.tip === \"student\" ? \"tests/takeTest\" : \"tests/evaluateTest\";\r\n  });\r\n  const { testState, setTestInProgress } = useContext(AppContext);\r\n  const [alert, setAlert] = useState({\r\n    open: false,\r\n    severity: \"success\",\r\n    message: \"\",\r\n  });\r\n\r\n  const handleCallback = (childData) => {\r\n    const clickedTestId = parseInt(childData);\r\n    console.log(testState);\r\n    if (testState || testState.id === clickedTestId) {\r\n      const clickedTest = tests.find((item) => item.id === clickedTestId);\r\n      setTestInProgress(clickedTest);\r\n      setRedirect(true);\r\n      history.push(redirectPath);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    getTests(user, setIsLoading, setTests, judge0Languges);\r\n    console.log(tests);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {redirect && <Redirect to={redirectPath} />}\r\n      {isLoading ? (\r\n        <Loader></Loader>\r\n      ) : (\r\n        // <Switch>\r\n        //   <Route path={`/tests/takeTest`}>\r\n        //     <TakeTest></TakeTest>\r\n        //   </Route>\r\n        //   <Route path={`/tests/evaluateTest`}>\r\n        //     <EvaluateTest></EvaluateTest>\r\n        //   </Route>\r\n\r\n        //   <Route\r\n        //     path=\"/tests\"\r\n        //     exact={true}\r\n        //     render={(props) => (\r\n        //       <TestsTable\r\n        //         title=\"Teste Programate\"\r\n        //         data={tests}\r\n        //         callback={handleCallback}\r\n        //         redirectPath={redirectPath}\r\n        //       ></TestsTable>\r\n        //     )}\r\n        //   />\r\n        // </Switch>\r\n        <>\r\n          {!redirect && (\r\n            <AlertBar\r\n              open={alert.open}\r\n              severity={alert.severity}\r\n              message={alert.message}\r\n            />\r\n          )}\r\n          <TestsTable\r\n            title={\r\n              user.tip === \"student\" ? \"Teste programate\" : \"Teste de corectat\"\r\n            }\r\n            data={tests}\r\n            callback={handleCallback}\r\n            redirectPath={redirectPath}\r\n          ></TestsTable>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst getTests = async (user, setIsLoading, setTests, languages) => {\r\n  console.log(\"getting tests from db..\");\r\n  let url = `${rootURL}`;\r\n  if (user.tip === \"student\") {\r\n    url += `/students/${user.id}/due`;\r\n  } else {\r\n    url += `/teachers/${user.id}/ungradedSubmissions`;\r\n  }\r\n\r\n  setIsLoading(true);\r\n  const response = await axios.get(url).catch((err) => console.log(err));\r\n\r\n  if (response) {\r\n    const tests = response.data;\r\n    processTests(tests, languages);\r\n    setTests(tests);\r\n  }\r\n  setIsLoading(false);\r\n};\r\n\r\nconst processTests = (tests, languages) => {\r\n  tests.forEach((item) => {\r\n    if (item.deadline !== null) {\r\n      item.deadline = parseDateTime(item.deadline);\r\n    }\r\n    if (item.id_limbaj_programare !== null) {\r\n      item.limbaj = getLanguage(item.id_limbaj_programare, languages);\r\n    }\r\n  });\r\n};\r\n\r\nconst parseDateTime = (datetime) => {\r\n  try {\r\n    const date = new Date(datetime);\r\n    // console.log(date.getTime());\r\n    return (\r\n      date.toLocaleDateString(\"ro-RO\") +\r\n      \", ora \" +\r\n      date.getHours() +\r\n      \":\" +\r\n      date.getMinutes()\r\n    );\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\nconst getLanguage = (languageId, languages) => {\r\n  const language = languages.find((item) => item.id === languageId);\r\n  const regexToRemoveParanthesis = / *\\([^)]*\\) */g;\r\n\r\n  return language.name.replace(regexToRemoveParanthesis, \"\");\r\n};\r\n\r\nexport default withRouter(Tests);\r\n"]},"metadata":{},"sourceType":"module"}