{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Joseph\\\\Desktop\\\\BcThesis\\\\licenta_aplicatie\\\\code-puls\\\\client\\\\src\\\\context\\\\context.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst rootURL = \"http://localhost:5000/api\";\nconst AppContext = /*#__PURE__*/React.createContext();\n\nconst AppProvider = ({\n  children\n}) => {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [tests, setTests] = useState([]);\n  const [showNavbar, setShowNavbar] = useState(true);\n  const [testQuestions, setTestQuestions] = useState([]);\n\n  const getStudentTests = async () => {\n    console.log(\"getting tests from db..\");\n    setIsLoading(true);\n    const response = await axios.get(`${rootURL}/students/1/due`).catch(err => console.log(err));\n\n    if (response) {\n      setTests(response.data);\n    }\n\n    setIsLoading(false);\n  };\n\n  const getTestQuestions = async testId => {\n    console.log(\"getting questions from db..\"); // setIsLoading(true);\n\n    const response = await axios.get(`${rootURL}/assignments/${testId}/questions`).catch(err => console.log(err));\n\n    if (response) {\n      setTests(response.data);\n    } // setIsLoading(false);\n\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: {\n      tests,\n      isLoading,\n      getStudentTests,\n      showNavbar,\n      setShowNavbar,\n      getTestQuestions\n    },\n    children: [children, \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 12\n  }, this);\n};\n\n_s(AppProvider, \"w7Vsiuiksr7MYYo0K39gSZoD+6I=\");\n\n_c = AppProvider;\nexport { AppContext, AppProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"sources":["C:/Users/Joseph/Desktop/BcThesis/licenta_aplicatie/code-puls/client/src/context/context.js"],"names":["React","useState","axios","rootURL","AppContext","createContext","AppProvider","children","isLoading","setIsLoading","tests","setTests","showNavbar","setShowNavbar","testQuestions","setTestQuestions","getStudentTests","console","log","response","get","catch","err","data","getTestQuestions","testId"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AACA,MAAMC,OAAO,GAAG,2BAAhB;AAEA,MAAMC,UAAU,gBAAGJ,KAAK,CAACK,aAAN,EAAnB;;AACA,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAAA;;AAChC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAOe,eAAe,GAAG,YAAY;AACjCC,IAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMU,QAAQ,GAAI,MAAMjB,KAAK,CAACkB,GAAN,CAAW,GAAEjB,OAAQ,iBAArB,EACvBkB,KADuB,CAChBC,GAAD,IAASL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CADQ,CAAxB;;AAGA,QAAGH,QAAH,EAAa;AACTR,MAAAA,QAAQ,CAACQ,QAAQ,CAACI,IAAV,CAAR;AACH;;AACDd,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEH,GAXD;;AAaA,QAAOe,gBAAgB,GAAG,MAAOC,MAAP,IAAkB;AACxCR,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EADwC,CAExC;;AACA,UAAMC,QAAQ,GAAI,MAAMjB,KAAK,CAACkB,GAAN,CAAW,GAAEjB,OAAQ,gBAAesB,MAAO,YAA3C,EACvBJ,KADuB,CAChBC,GAAD,IAASL,OAAO,CAACC,GAAR,CAAYI,GAAZ,CADQ,CAAxB;;AAGA,QAAGH,QAAH,EAAa;AACTR,MAAAA,QAAQ,CAACQ,QAAQ,CAACI,IAAV,CAAR;AACH,KARuC,CASxC;;AAEH,GAXD;;AAgBA,sBAAO,QAAC,UAAD,CAAY,QAAZ;AAAqB,IAAA,KAAK,EAAE;AAACb,MAAAA,KAAD;AAAQF,MAAAA,SAAR;AAAmBQ,MAAAA,eAAnB;AAAoCJ,MAAAA,UAApC;AAAgDC,MAAAA,aAAhD;AAA+DW,MAAAA;AAA/D,KAA5B;AAAA,eAA+GjB,QAA/G;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACH,CApCD;;GAAMD,W;;KAAAA,W;AAsCN,SAAQF,UAAR,EAAoBE,WAApB","sourcesContent":["import React, {useState} from 'react';\r\nimport axios from \"axios\";\r\nconst rootURL = \"http://localhost:5000/api\";\r\n\r\nconst AppContext = React.createContext();\r\nconst AppProvider = ({children}) => {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [tests, setTests] = useState([]); \r\n    const [showNavbar, setShowNavbar] = useState(true);\r\n    const [testQuestions, setTestQuestions] = useState([]);\r\n\r\n    const  getStudentTests = async () => {\r\n        console.log(\"getting tests from db..\")\r\n        setIsLoading(true);\r\n        const response  = await axios.get(`${rootURL}/students/1/due`)\r\n        .catch((err) => console.log(err));\r\n\r\n        if(response) {\r\n            setTests(response.data);\r\n        }\r\n        setIsLoading(false);\r\n\r\n    }  \r\n\r\n    const  getTestQuestions = async (testId) => {\r\n        console.log(\"getting questions from db..\")\r\n        // setIsLoading(true);\r\n        const response  = await axios.get(`${rootURL}/assignments/${testId}/questions`)\r\n        .catch((err) => console.log(err));\r\n\r\n        if(response) {\r\n            setTests(response.data);\r\n        }\r\n        // setIsLoading(false);\r\n\r\n    }  \r\n\r\n\r\n\r\n\r\n    return <AppContext.Provider value={{tests, isLoading, getStudentTests, showNavbar, setShowNavbar, getTestQuestions}}>{children} </AppContext.Provider>\r\n}\r\n\r\nexport {AppContext, AppProvider}"]},"metadata":{},"sourceType":"module"}