{"ast":null,"code":"const getRandom = () => {\n  const randomValue = Math.random();\n\n  if (randomValue === 0) {\n    return getRandom();\n  }\n\n  return randomValue;\n};\n\nconst normalDistribution = () => {\n  const u = getRandom();\n  const v = getRandom();\n  return Math.sqrt(-4.0 * Math.log(u)) * Math.cos(1.0 * Math.PI * v);\n};\n\nexport const dataGenerator = pointCount => {\n  const data = [];\n\n  for (let i = 0; i < pointCount; i += 1) {\n    data.push({\n      arg1: (normalDistribution() + 4) * 10,\n      val1: normalDistribution() + 4,\n      arg2: (normalDistribution() + 7) * 10,\n      val2: normalDistribution() + 7\n    });\n  }\n\n  return data;\n};","map":{"version":3,"sources":["C:/Users/Joseph/Desktop/BcThesis/licenta_aplicatie/code-puls/client/src/components/TeacherGraphGenerator.js"],"names":["getRandom","randomValue","Math","random","normalDistribution","u","v","sqrt","log","cos","PI","dataGenerator","pointCount","data","i","push","arg1","val1","arg2","val2"],"mappings":"AAAA,MAAMA,SAAS,GAAG,MAAM;AACtB,QAAMC,WAAW,GAAGC,IAAI,CAACC,MAAL,EAApB;;AACA,MAAIF,WAAW,KAAK,CAApB,EAAuB;AACrB,WAAOD,SAAS,EAAhB;AACD;;AACD,SAAOC,WAAP;AACD,CAND;;AAQA,MAAMG,kBAAkB,GAAG,MAAM;AAC/B,QAAMC,CAAC,GAAGL,SAAS,EAAnB;AACA,QAAMM,CAAC,GAAGN,SAAS,EAAnB;AACA,SAAOE,IAAI,CAACK,IAAL,CAAU,CAAC,GAAD,GAAOL,IAAI,CAACM,GAAL,CAASH,CAAT,CAAjB,IAAgCH,IAAI,CAACO,GAAL,CAAS,MAAMP,IAAI,CAACQ,EAAX,GAAgBJ,CAAzB,CAAvC;AACD,CAJD;;AAMA,OAAO,MAAMK,aAAa,GAAIC,UAAD,IAAgB;AAC3C,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,UAApB,EAAgCE,CAAC,IAAI,CAArC,EAAwC;AACtCD,IAAAA,IAAI,CAACE,IAAL,CAAU;AACRC,MAAAA,IAAI,EAAE,CAACZ,kBAAkB,KAAK,CAAxB,IAA6B,EAD3B;AAERa,MAAAA,IAAI,EAAEb,kBAAkB,KAAK,CAFrB;AAGRc,MAAAA,IAAI,EAAE,CAACd,kBAAkB,KAAK,CAAxB,IAA6B,EAH3B;AAIRe,MAAAA,IAAI,EAAEf,kBAAkB,KAAK;AAJrB,KAAV;AAMD;;AACD,SAAOS,IAAP;AACD,CAXM","sourcesContent":["const getRandom = () => {\r\n  const randomValue = Math.random();\r\n  if (randomValue === 0) {\r\n    return getRandom();\r\n  }\r\n  return randomValue;\r\n};\r\n\r\nconst normalDistribution = () => {\r\n  const u = getRandom();\r\n  const v = getRandom();\r\n  return Math.sqrt(-4.0 * Math.log(u)) * Math.cos(1.0 * Math.PI * v);\r\n};\r\n\r\nexport const dataGenerator = (pointCount) => {\r\n  const data = [];\r\n  for (let i = 0; i < pointCount; i += 1) {\r\n    data.push({\r\n      arg1: (normalDistribution() + 4) * 10,\r\n      val1: normalDistribution() + 4,\r\n      arg2: (normalDistribution() + 7) * 10,\r\n      val2: normalDistribution() + 7,\r\n    });\r\n  }\r\n  return data;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}